var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = KiteUtils","category":"page"},{"location":"#KiteUtils","page":"Home","title":"KiteUtils","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for KiteUtils.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [KiteUtils]","category":"page"},{"location":"#KiteUtils.ExtSysState","page":"Home","title":"KiteUtils.ExtSysState","text":"ExtSysState{P}\n\nExtended system state. Derived values for plotting. P is the number of tether particles.\n\ntime::Float64\ntime since launch in seconds\norient::Rotations.UnitQuaternion{Float32}\norientation of the kite\nX::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in x\nY::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in y\nZ::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in z\nx::Float32\nkite position in x\ny::Float32\nkite position in y\nz::Float32\nkite position in z\n\n\n\n\n\n","category":"type"},{"location":"#KiteUtils.SysState","page":"Home","title":"KiteUtils.SysState","text":"SysState{P}\n\nBasic system state. One of these is saved per time step. P is the number of tether particles.\n\ntime::Float64\ntime since start of simulation in seconds\norient::StaticArrays.MVector{4, Float32}\norientation of the kite (quaternion)\nelevation::Float32\nelevation angle in radians\nazimuth::Float32\nazimuth angle in radians\nl_tether::Float32\ntether length [m]\nv_reelout::Float32\nreel out velocity [m/s]\nforce::Float32\ntether force [N]\ndepower::Float32\ndepower settings\nv_app::Float32\nnorm of apparent wind speed [m/s]\nX::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in x\nY::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in y\nZ::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in z\n\n\n\n\n\n","category":"type"},{"location":"#KiteUtils.azimuth_east-Tuple{Any}","page":"Home","title":"KiteUtils.azimuth_east","text":"function azimuth_east(vec)\n\nCalculate the azimuth angle in radian from the kite position in ENU reference frame. Zero east. Positive direction clockwise seen from above. Valid range: -π .. π.\n\n\n\n\n\n","category":"method"},{"location":"#KiteUtils.calc_elevation-Tuple{Any}","page":"Home","title":"KiteUtils.calc_elevation","text":" function calc_elevation(vec)\n\nCalculate the elevation angle in radian from the kite position. \n\n\n\n\n\n","category":"method"},{"location":"#KiteUtils.demo_state","page":"Home","title":"KiteUtils.demo_state","text":"function demo_state(P, height=6.0, time=0.0)\n\nCreate a demo state with a given height and time. P is the number of tether particles.\n\nReturns a SysState instance.\n\n\n\n\n\n","category":"function"},{"location":"#KiteUtils.ground_dist-Tuple{Any}","page":"Home","title":"KiteUtils.ground_dist","text":"function ground_dist(vec)\n\nCalculate the ground distance of the kite from the groundstation based on the kite position (x,y,z, z up).\n\n\n\n\n\n","category":"method"},{"location":"#KiteUtils.rot-Tuple{Any, Any, Any}","page":"Home","title":"KiteUtils.rot","text":"rot(pos_kite, pos_before, v_app)\n\nCalculate the rotation matrix of the kite based on the position of the last two tether particles and the apparent wind speed vector.\n\n\n\n\n\n","category":"method"},{"location":"#KiteUtils.rot3d-NTuple{6, Any}","page":"Home","title":"KiteUtils.rot3d","text":"rot3d(ax, ay, az, bx, by, bz)\n\nCalculate the rotation of reference frame (ax, ay, az) so that it matches the reference frame (bx, by, bz). All parameters must be 3-element vectors. Both refrence frames must be orthogonal, all vectors must already be normalized.\n\nSource: TRIAD_Algorithm\n\n\n\n\n\n","category":"method"}]
}
