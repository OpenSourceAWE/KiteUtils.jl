var documenterSearchIndex = {"docs":
[{"location":"functions/#Exported-Functions","page":"Exported Functions","title":"Exported Functions","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"CurrentModule = KiteUtils","category":"page"},{"location":"functions/#Reading-config-files","page":"Exported Functions","title":"Reading config files","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"set_data_path(data_path)\nload_settings(project=\"\")\ncopy_settings()\nse()","category":"page"},{"location":"functions/#KiteUtils.set_data_path-Tuple{Any}","page":"Exported Functions","title":"KiteUtils.set_data_path","text":"set_data_path(data_path)\n\nSet the directory for log and config files.\n\n\n\n\n\n","category":"method"},{"location":"functions/#KiteUtils.load_settings","page":"Exported Functions","title":"KiteUtils.load_settings","text":"load_settings(project=\"\")\n\nLoad the project with the given file name. The default project is determined by the content of the file system.yaml .\n\nThe project must include the path and the suffix .yaml .\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.copy_settings-Tuple{}","page":"Exported Functions","title":"KiteUtils.copy_settings","text":"copy_settings()\n\nCopy the default settings.yaml and system.yaml files to the folder DATAPATH (it will be created if it doesn't exist).\n\n\n\n\n\n","category":"method"},{"location":"functions/#KiteUtils.se-Tuple{}","page":"Exported Functions","title":"KiteUtils.se","text":"se()\n\nGetter function for the Settings struct.\n\nThe default project is determined by the content of the file system.yaml .\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"Also look at the default example: settings.yaml .","category":"page"},{"location":"functions/#Creating-test-data","page":"Exported Functions","title":"Creating test data","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"demo_state(P, height=6.0, time=0.0)\ndemo_syslog(P, name=\"Test flight\"; duration=10)\ndemo_log(P, name=\"Test_flight\"; duration=10)","category":"page"},{"location":"functions/#KiteUtils.demo_state","page":"Exported Functions","title":"KiteUtils.demo_state","text":"function demo_state(P, height=6.0, time=0.0)\n\nCreate a demo state with a given height and time. P is the number of tether particles.\n\nReturns a SysState instance.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.demo_syslog","page":"Exported Functions","title":"KiteUtils.demo_syslog","text":"function demo_syslog(P, name=\"Test flight\"; duration=10)\n\nCreate a demo flight log  with given name [String] and duration [s] as StructArray. P is the number of tether particles.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.demo_log","page":"Exported Functions","title":"KiteUtils.demo_log","text":"function demo_log(P, name=\"Test_flight\"; duration=10)\n\nCreate an artifical SysLog struct for demonstration purposes. P is the number of tether particles.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Loading,-saving-and-converting-log-files","page":"Exported Functions","title":"Loading, saving and converting log files","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"load_log(P, filename::String)\nsave_log(P, flight_log)\nsyslog2extlog(P, syslog)","category":"page"},{"location":"functions/#KiteUtils.load_log-Tuple{Any, String}","page":"Exported Functions","title":"KiteUtils.load_log","text":"function load_log(P, filename::String)\n\nRead a log file that was saved as .arrow file.  P is the number of tether particles.\n\n\n\n\n\n","category":"method"},{"location":"functions/#KiteUtils.save_log-Tuple{Any, Any}","page":"Exported Functions","title":"KiteUtils.save_log","text":"function save_log(P, flight_log)\n\nSave a fligh log file as .arrow file. P is the number of tether particles.\n\n\n\n\n\n","category":"method"},{"location":"functions/#KiteUtils.syslog2extlog-Tuple{Any, Any}","page":"Exported Functions","title":"KiteUtils.syslog2extlog","text":"function syslog2extlog(P, syslog)\n\nExtend a flight systym log with the fields x, y, and z (kite positions) and convert the orientation to the type UnitQuaternion.\n\n\n\n\n\n","category":"method"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"The function set_data_path(data_path) can be used to set the directory for the log files. ","category":"page"},{"location":"functions/#Rotation-matrices","page":"Exported Functions","title":"Rotation matrices","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"rot3d(ax, ay, az, bx, by, bz)\nrot(pos_kite, pos_before, v_app)","category":"page"},{"location":"functions/#KiteUtils.rot3d-NTuple{6, Any}","page":"Exported Functions","title":"KiteUtils.rot3d","text":"rot3d(ax, ay, az, bx, by, bz)\n\nCalculate the rotation matrix that needs to be applied on the reference frame (ax, ay, az) to match  the reference frame (bx, by, bz). All parameters must be 3-element vectors. Both refrence frames must be orthogonal, all vectors must already be normalized.\n\nSource: TRIAD_Algorithm\n\n\n\n\n\n","category":"method"},{"location":"functions/#KiteUtils.rot-Tuple{Any, Any, Any}","page":"Exported Functions","title":"KiteUtils.rot","text":"rot(pos_kite, pos_before, v_app)\n\nCalculate the rotation matrix of the kite based on the position of the last two tether particles and the apparent wind speed vector.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Geometric-calculations","page":"Exported Functions","title":"Geometric calculations","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"Calculate the elevation angle, the azimuth angle and the ground distance based on the kite position.","category":"page"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"calc_elevation(vec)\nazimuth_east(vec)\nground_dist(vec)","category":"page"},{"location":"functions/#KiteUtils.calc_elevation-Tuple{Any}","page":"Exported Functions","title":"KiteUtils.calc_elevation","text":" function calc_elevation(vec)\n\nCalculate the elevation angle in radian from the kite position. \n\n\n\n\n\n","category":"method"},{"location":"functions/#KiteUtils.azimuth_east-Tuple{Any}","page":"Exported Functions","title":"KiteUtils.azimuth_east","text":"function azimuth_east(vec)\n\nCalculate the azimuth angle in radian from the kite position in ENU reference frame. Zero east. Positive direction clockwise seen from above. Valid range: -π .. π.\n\n\n\n\n\n","category":"method"},{"location":"functions/#KiteUtils.ground_dist-Tuple{Any}","page":"Exported Functions","title":"KiteUtils.ground_dist","text":"function ground_dist(vec)\n\nCalculate the ground distance of the kite from the groundstation based on the kite position (x,y,z, z up).\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = KiteUtils","category":"page"},{"location":"#KiteUtils","page":"Home","title":"KiteUtils","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for KiteUtils.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Download Julia 1.6 or later, if you haven't already. You can add KiteUtils from  Julia's package manager, by typing ","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add KiteUtils","category":"page"},{"location":"","page":"Home","title":"Home","text":"at the Julia prompt.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides functions to:","category":"page"},{"location":"","page":"Home","title":"Home","text":"read configuration files, written in .yaml format\nread and write log files, which is memory efficient and fast due to the use of the Apache Arrow format\npresent log files in two different formats, one optimized to look at the system state at one point in time, and one that presents per-variable arrays with the time as index\nhelper functions for geometric transformations","category":"page"},{"location":"types/#Exported-Types","page":"Exported Types","title":"Exported Types","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"CurrentModule = KiteUtils","category":"page"},{"location":"types/#Config-files","page":"Exported Types","title":"Config files","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"Settings","category":"page"},{"location":"types/#KiteUtils.Settings","page":"Exported Types","title":"KiteUtils.Settings","text":"Settings\n\nFlat struct, defining the settings of the Simulator and the Viewer.\n\nproject::String\nDefault:\nlog_file::String\nDefault:\nmodel::String\nDefault:\nsegments::Int64\nnumber of tether segments Default: 0\nsample_freq::Int64\nDefault: 0\ntime_lapse::Float64\nDefault: 0\nzoom::Float64\nDefault: 0\nfixed_font::String\nDefault:\nv_reel_out::Float64\nDefault: 0\nc0::Float64\nDefault: 0\nc_s::Float64\nDefault: 0\nc2_cor::Float64\nDefault: 0\nk_ds::Float64\nDefault: 0\narea::Float64\nprojected kite area            [m^2] Default: 0\nmass::Float64\nkite mass incl. sensor unit     [kg] Default: 0\nheight_k::Float64\nheight of the kite               [m] Default: 0\nalpha_cl::Vector{Float64}\nDefault: []\ncl_list::Vector{Float64}\nDefault: []\nalpha_cd::Vector{Float64}\nDefault: []\ncd_list::Vector{Float64}\nDefault: []\nrel_side_area::Float64\nrelative side area               [%] Default: 0\nalpha_d_max::Float64\nmax depower angle              [deg] Default: 0\nkcu_mass::Float64\nmass of the kite control unit   [kg] Default: 0\npower2steer_dist::Float64\npower to steering line distance  [m] Default: 0\ndepower_drum_diameter::Float64\nDefault: 0\ndepower_offset::Float64\nDefault: 0\ntape_thickness::Float64\nDefault: 0\nv_depower::Float64\nDefault: 0\nv_steering::Float64\nDefault: 0\ndepower_gain::Float64\nDefault: 0\nsteering_gain::Float64\nDefault: 0\nv_wind::Float64\nDefault: 0\nh_ref::Float64\nDefault: 0\nrho_0::Float64\nDefault: 0\nz0::Float64\nDefault: 0\nprofile_law::Int64\nDefault: 0\nalpha::Float64\nDefault: 0\ncd_tether::Float64\nDefault: 0\nd_tether::Float64\nDefault: 0\nd_line::Float64\nDefault: 0\nheight_b::Float64\nheight of the bridle             [m] Default: 0\nl_bridle::Float64\nDefault: 0\nl_tether::Float64\nDefault: 0\ndamping::Float64\nDefault: 0\nc_spring::Float64\nDefault: 0\nelevation::Float64\nDefault: 0\nsim_time::Float64\nDefault: 0\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"Also look at the default file that is parsed to fill the Settings stuct with data: settings.yaml .","category":"page"},{"location":"types/#Log-files-and-internal-state-representation","page":"Exported Types","title":"Log files and internal state representation","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"MyFloat\nSysState{P}\nExtSysState{P}\nSysLog{P}","category":"page"},{"location":"types/#KiteUtils.MyFloat","page":"Exported Types","title":"KiteUtils.MyFloat","text":"const MyFloat = Float32\n\nType used for position components and scalar SysState members.\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteUtils.SysState","page":"Exported Types","title":"KiteUtils.SysState","text":"SysState{P}\n\nBasic system state. One of these is saved per time step. P is the number of tether particles.\n\ntime::Float64\ntime since start of simulation in seconds\norient::StaticArrays.MVector{4, Float32}\norientation of the kite (quaternion, order w,x,y,z)\nelevation::Float32\nelevation angle in radians\nazimuth::Float32\nazimuth angle in radians\nl_tether::Float32\ntether length [m]\nv_reelout::Float32\nreel out velocity [m/s]\nforce::Float32\ntether force [N]\ndepower::Float32\ndepower settings\nv_app::Float32\nnorm of apparent wind speed [m/s]\nX::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in x\nY::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in y\nZ::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in z\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteUtils.ExtSysState","page":"Exported Types","title":"KiteUtils.ExtSysState","text":"ExtSysState{P}\n\nExtended system state. Derived values for plotting. P is the number of tether particles.\n\ntime::Float64\ntime since launch in seconds\norient::Rotations.QuatRotation{Float32}\norientation of the kite\nX::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in x\nY::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in y\nZ::StaticArrays.MVector{P, Float32} where P\nvector of particle positions in z\nx::Float32\nkite position in x\ny::Float32\nkite position in y\nz::Float32\nkite position in z\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteUtils.SysLog","page":"Exported Types","title":"KiteUtils.SysLog","text":"SysLog{P}\n\nFlight log, containing the basic data as struct of arrays  and in addition an extended view on the data that includes derived/ calculated values for plotting finally meta data like the file name of the log file is included.\n\nname::String\nname of the flight log\nsyslog::StructArrays.StructArray{SysState{P}} where P\nstruct of vectors\nextlog::StructArrays.StructArray{ExtSysState{P}} where P\nstruct of vectors, containing derived values\n\n\n\n\n\n","category":"type"}]
}
