var documenterSearchIndex = {"docs":
[{"location":"functions/#Exported-Functions","page":"Exported Functions","title":"Exported Functions","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"CurrentModule = KiteUtils","category":"page"},{"location":"functions/#Reading-config-files","page":"Exported Functions","title":"Reading config files","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"set_data_path\nload_settings\nupdate_settings\ncopy_settings\nse\nse_dict","category":"page"},{"location":"functions/#KiteUtils.set_data_path","page":"Exported Functions","title":"KiteUtils.set_data_path","text":"set_data_path(data_path=\"\")\n\nSet the directory for log and config files.\n\nIf called without argument, use the data path of the package to obtain the default settings when calling se(). \n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.load_settings","page":"Exported Functions","title":"KiteUtils.load_settings","text":"load_settings(project=PROJECT)\n\nLoad the project with the given file name.\n\nThe project must include the path and the suffix .yaml .\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.update_settings","page":"Exported Functions","title":"KiteUtils.update_settings","text":"update_settings()\n\nRe-read the settings from a previously loaded project. Returns the new settings.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.copy_settings","page":"Exported Functions","title":"KiteUtils.copy_settings","text":"copy_settings()\n\nCopy the default settings.yaml and system.yaml files to the folder DATAPATH (it will be created if it doesn't exist).\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.se","page":"Exported Functions","title":"KiteUtils.se","text":"se(project=\"system.yaml\")\n\nGetter function for the Settings struct.\n\nThe settings.yaml file to load is determined by the content of the file system.yaml .\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.se_dict","page":"Exported Functions","title":"KiteUtils.se_dict","text":"se_dict()\n\nGetter function for the dictionary, representing the settings.yaml file.\n\nAccess to the dict is much slower than access to the setting struct, but more flexible.\n\nUsage example: z0 = se_dict()[\"environment\"][\"z0\"]\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"Also look at the default example: settings.yaml .","category":"page"},{"location":"functions/#Creating-test-data","page":"Exported Functions","title":"Creating test data","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"demo_state\ndemo_state_4p\ndemo_syslog\ndemo_log\nget_particles","category":"page"},{"location":"functions/#KiteUtils.demo_state","page":"Exported Functions","title":"KiteUtils.demo_state","text":"demo_state(P, height=6.0, time=0.0)\n\nCreate a demo state with a given height and time. P is the number of tether particles.\n\nReturns a SysState instance.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.demo_state_4p","page":"Exported Functions","title":"KiteUtils.demo_state_4p","text":"demo_state_4p(P, height=6.0, time=0.0)\n\nCreate a demo state, using the 4 point kite model with a given height and time. P is the number of tether particles.\n\nReturns a SysState instance.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.demo_syslog","page":"Exported Functions","title":"KiteUtils.demo_syslog","text":"demo_syslog(P, name=\"Test flight\"; duration=10)\n\nCreate a demo flight log  with given name [String] and duration [s] as StructArray. P is the number of tether particles.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.demo_log","page":"Exported Functions","title":"KiteUtils.demo_log","text":"demo_log(P, name=\"Test_flight\"; duration=10)\n\nCreate an artifical SysLog struct for demonstration purposes. P is the number of tether particles.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.get_particles","page":"Exported Functions","title":"KiteUtils.get_particles","text":"get_particles(height_k, height_b, width, m_k, pos_pod= [ 75., 0., 129.90381057], vec_c=[-15., 0., -25.98076211], \n              v_app=[10.4855, 0, -3.08324])\n\nCalculate the initial positions of the particels representing  a 4-point kite, connected to a kite control unit (KCU). \n\nParameters:\n\nheight_k: height of the kite itself, not above ground [m]\nheight_b: height of the bridle [m]\nwidth: width of the kite [m]\nmk: relative nose distance\npos_pod: position of the control pod\nvec_c: vector of the last tether segment\n\n\n\n\n\n","category":"function"},{"location":"functions/#Loading,-saving-and-converting-log-files","page":"Exported Functions","title":"Loading, saving and converting log files","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"log!\nload_log\nsave_log\nexport_log\nsys_log","category":"page"},{"location":"functions/#KiteUtils.log!","page":"Exported Functions","title":"KiteUtils.log!","text":"log!(logger::Logger, state::SysState)\n\nLog a state in a logger object. Do nothing if the preallocated size would be exceeded. Returns the current number of elements of the log.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.load_log","page":"Exported Functions","title":"KiteUtils.load_log","text":"load_log(filename::String; path=\"\")\n\nRead a log file that was saved as .arrow file.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.save_log","page":"Exported Functions","title":"KiteUtils.save_log","text":"save_log(logger::Logger, name=\"sim_log\", compress=true;\n            path=\"\",\n            colmeta = Dict(:var_01 => [\"name\" => \"var_01\"],\n                           :var_02 => [\"name\" => \"var_02\"],\n                           :var_03 => [\"name\" => \"var_03\"],\n                           :var_04 => [\"name\" => \"var_04\"],\n                           :var_05 => [\"name\" => \"var_05\"],\n                           :var_06 => [\"name\" => \"var_06\"],\n                           :var_07 => [\"name\" => \"var_07\"],\n                           :var_08 => [\"name\" => \"var_08\"],\n                           :var_09 => [\"name\" => \"var_09\"],\n                           :var_10 => [\"name\" => \"var_10\"],\n                           :var_11 => [\"name\" => \"var_11\"],\n                           :var_12 => [\"name\" => \"var_12\"],\n                           :var_13 => [\"name\" => \"var_13\"],\n                           :var_14 => [\"name\" => \"var_14\"],\n                           :var_15 => [\"name\" => \"var_15\"],\n                           :var_16 => [\"name\" => \"var_16\"]\n        ))\n\nSave a fligh log from a logger as .arrow file. By default lz4 compression is used,  if you use false as second parameter no compression is used.\n\n\n\n\n\nsave_log(flight_log::SysLog, compress=true; path=\"\")\n\nSave a fligh log of type SysLog as .arrow file. By default lz4 compression is used,  if you use false as second parameter no compression is used.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.export_log","page":"Exported Functions","title":"KiteUtils.export_log","text":"export_log(flight_log; path=\"\")\n\nSave a fligh log of type SysLog as .csv file.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.sys_log","page":"Exported Functions","title":"KiteUtils.sys_log","text":"sys_log(logger::Logger, name=\"sim_log\";\n            colmeta = Dict(:var_01 => [\"name\" => \"var_01\"],\n                           :var_02 => [\"name\" => \"var_02\"],\n                           :var_03 => [\"name\" => \"var_03\"],\n                           :var_04 => [\"name\" => \"var_04\"],\n                           :var_05 => [\"name\" => \"var_05\"],\n                           :var_06 => [\"name\" => \"var_06\"],\n                           :var_07 => [\"name\" => \"var_07\"],\n                           :var_08 => [\"name\" => \"var_08\"],\n                           :var_09 => [\"name\" => \"var_09\"],\n                           :var_10 => [\"name\" => \"var_10\"],\n                           :var_11 => [\"name\" => \"var_11\"],\n                           :var_12 => [\"name\" => \"var_12\"],\n                           :var_13 => [\"name\" => \"var_13\"],\n                           :var_14 => [\"name\" => \"var_14\"],\n                           :var_15 => [\"name\" => \"var_15\"],\n                           :var_16 => [\"name\" => \"var_16\"]\n        ))\n\nConverts the data of a Logger object into a SysLog object, containing a StructArray, a name and the column meta data.\n\n\n\n\n\n","category":"function"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"The function set_data_path(data_path) can be used to set the directory for the log files. ","category":"page"},{"location":"functions/#Rotation-matrices","page":"Exported Functions","title":"Rotation matrices","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"rot3d(ax, ay, az, bx, by, bz)\nrot(pos_kite, pos_before, v_app)","category":"page"},{"location":"functions/#KiteUtils.rot3d-NTuple{6, Any}","page":"Exported Functions","title":"KiteUtils.rot3d","text":"rot3d(ax, ay, az, bx, by, bz)\n\nCalculate the rotation matrix that needs to be applied on the reference frame (ax, ay, az) to match  the reference frame (bx, by, bz). All parameters must be 3-element vectors. Both refrence frames must be orthogonal, all vectors must already be normalized.\n\nSource: TRIAD_Algorithm\n\n\n\n\n\n","category":"method"},{"location":"functions/#KiteUtils.rot-Tuple{Any, Any, Any}","page":"Exported Functions","title":"KiteUtils.rot","text":"rot(pos_kite, pos_before, v_app)\n\nCalculate the rotation matrix of the kite based on the position of the last two tether particles and the apparent wind speed vector.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Coordinate-system-transformations","page":"Exported Functions","title":"Coordinate system transformations","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"fromENU2EG\nfromEG2W\nfromW2SE\nfromKS2EX\nfromEX2EG","category":"page"},{"location":"functions/#KiteUtils.fromENU2EG","page":"Exported Functions","title":"KiteUtils.fromENU2EG","text":"fromENU2EG(pointENU)\n\nTransform the position of the kite in the East North Up reference frame to the Earth Groundstation (North West Up) reference frame.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.fromEG2W","page":"Exported Functions","title":"KiteUtils.fromEG2W","text":"fromEG2W(vector, down_wind_direction = pi/2.0)\n\nTransform a vector (x,y,z) from Earth Groundstation to Wind reference frame.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.fromW2SE","page":"Exported Functions","title":"KiteUtils.fromW2SE","text":"fromW2SE(vector, elevation, azimuth)\n\nTransform a (velocity-) vector (x,y,z) from Wind to Small Earth reference frame .\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.fromKS2EX","page":"Exported Functions","title":"KiteUtils.fromKS2EX","text":"fromKS2EX(vector, orientation)\n\nTransform a vector (x,y,z) from KiteSensor to Earth Xsens reference frame.\n\norientation in Euler angles (roll, pitch, yaw)\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.fromEX2EG","page":"Exported Functions","title":"KiteUtils.fromEX2EG","text":"fromEX2EG(vector)\n\nTransform a vector (x,y,z) from EarthXsens to Earth Groundstation reference frame\n\n\n\n\n\n","category":"function"},{"location":"functions/#Geometric-calculations","page":"Exported Functions","title":"Geometric calculations","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"Calculate the elevation angle, the azimuth angle and the ground distance based on the kite position. In addition, calculate the heading angle, the heading vector, the arc cos (safe version) and the initial kite reference frame.","category":"page"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"calc_elevation\ncalc_azimuth\ncalc_heading\ncalc_course\ncalc_heading_w\nazimuth_east\nground_dist\nacos2\ninitial_kite_ref_frame","category":"page"},{"location":"functions/#KiteUtils.calc_elevation","page":"Exported Functions","title":"KiteUtils.calc_elevation","text":"calc_elevation(vec)\n\nCalculate the elevation angle in radian from the kite position. \n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.calc_azimuth","page":"Exported Functions","title":"KiteUtils.calc_azimuth","text":"calc_azimuth(azimuth_north, up_wind_direction = -π/2)\n\nCalculate the azimuth in the wind reference frame. The upwinddirection is the direction the wind is coming from Zero is at north; clockwise positive. Default: Wind from west.\n\nReturns:\n\nAngle in radians. Zero straight downwind. Positive direction clockwise seen from above.\nValid range: -pi .. pi. \n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.calc_heading","page":"Exported Functions","title":"KiteUtils.calc_heading","text":"calc_heading(orientation, down_wind_direction = pi/2.0, respos=true)\n\nCalculate the heading angle of the kite in radians. The heading is the direction the nose of the kite is pointing to.  If respos is true the heading angle is defined in the range of 0 .. 2π, otherwise in the range -π .. π\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.calc_course","page":"Exported Functions","title":"KiteUtils.calc_course","text":"calc_course(velocityENU, elevation, azimuth, down_wind_direction = π/2, respos=true)\n\nCalculate the course angle in radian.\n\nvelocityENU:         Kite velocity in EastNorthUp reference frame\ndownwinddirection: The direction the wind is going to; zero at north;                      clockwise positive from above; default: going to east.\nrespos:              If true, the result is in the range 0 .. 2π, otherwis -π .. π\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.calc_heading_w","page":"Exported Functions","title":"KiteUtils.calc_heading_w","text":"calc_heading_w(orientation, down_wind_direction = pi/2.0)\n\nCalculate the heading vector in wind reference frame.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.azimuth_east","page":"Exported Functions","title":"KiteUtils.azimuth_east","text":"azimuth_east(vec)\n\nCalculate the azimuth angle in radian from the kite position in ENU reference frame. Zero east. Positive direction clockwise seen from above. Valid range: -π .. π.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.ground_dist","page":"Exported Functions","title":"KiteUtils.ground_dist","text":"ground_dist(vec)\n\nCalculate the ground distance of the kite from the groundstation based on the kite position (x,y,z, z up).\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.acos2","page":"Exported Functions","title":"KiteUtils.acos2","text":"acos2(arg)\n\nCalculate the acos of arg, but allow values slightly above one and below minus one to avoid exceptions in case of rounding errors. Returns an angle in radian.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.initial_kite_ref_frame","page":"Exported Functions","title":"KiteUtils.initial_kite_ref_frame","text":"initial_kite_ref_frame(vec_c, v_app)\n\nCalculate the initial orientation of the kite based on the last tether segment and the apparent wind speed.\n\nParameters:\n\nvec_c: (posn-2) - (posn-1) n: number of particles without the three kite particles                                   that do not belong to the main thether (P1, P2 and P3).\nv_app: vector of the apparent wind speed\n\nReturns: x, y, z:  the unit vectors of the kite reference frame in the ENU reference frame\n\n\n\n\n\n","category":"function"},{"location":"examples/","page":"Examples","title":"Examples","text":"CurrentModule = KiteUtils","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Create-a-test-project","page":"Examples","title":"Create a test project","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"mkdir test\ncd test\njulia --project","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"and add KiteUtils to the project:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"]activate .\nadd KiteUtils\n<BACKSPACE>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"finally, copy the default configuration files to your new project:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using KiteUtils\ncopy_settings()","category":"page"},{"location":"examples/#Use-of-the-settings","page":"Examples","title":"Use of the settings","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using KiteUtils\nconst set = se()","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"KiteUtils.Settings\n  project: String \"settings.yaml\"\n  log_file: String \"data/log_8700W_8ms\"\n  model: String \"data/kite.obj\"\n  segments: Int64 6\n  sample_freq: Int64 20\n  time_lapse: Float64 1.0\n  zoom: Float64 0.03\n  fixed_font: String \"\"\n  v_reel_out: Float64 0.0\n  c0: Float64 0.0\n  c_s: Float64 2.59\n  c2_cor: Float64 0.93\n  k_ds: Float64 1.5\n  area: Float64 10.18\n  mass: Float64 6.2\n  height_k: Float64 2.23\n  alpha_cl: Array{Float64}((12,)) [-180.0, -160.0, -90.0, -20.0, -10.0, -5.0, 0.0, 20.0, 40.0, 90.0, 160.0, 180.0]\n  cl_list: Array{Float64}((12,)) [0.0, 0.5, 0.0, 0.08, 0.125, 0.15, 0.2, 1.0, 1.0, 0.0, -0.5, 0.0]\n  alpha_cd: Array{Float64}((11,)) [-180.0, -170.0, -140.0, -90.0, -20.0, 0.0, 20.0, 90.0, 140.0, 170.0, 180.0]\n  cd_list: Array{Float64}((11,)) [0.5, 0.5, 0.5, 1.0, 0.2, 0.1, 0.2, 1.0, 0.5, 0.5, 0.5]\n  ...\n  l_bridle: Float64 33.4\n  l_tether: Float64 392.0\n  damping: Float64 473.0\n  c_spring: Float64 614600.0\n  elevation: Float64 70.7\n  sim_time: Float64 100.0","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"You can see the available setting parameters by typing set.<TAB><TAB> at the Julia prompt. Defining set as constant improves the performance of the access to the  parameters. You can still change the values of the parameters, only the types are fixed.","category":"page"},{"location":"examples/#The-system-state,-type-SysState","page":"Examples","title":"The system state, type SysState","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The state of the kitepower system is captured in the struct SysState .","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> using KiteUtils\n\njulia> st = demo_state(7)\ntime      [s]:       0.0\norient    [w,x,y,z]: Float32[0.5, 0.5, -0.5, -0.5]\nelevation [rad]:     0.5404195\nazimuth   [rad]:     0.0\nl_tether  [m]:       0.0\nv_reelout [m/s]:     0.0\nforce     [N]:       0.0\ndepower   [-]:       0.0\nsteering  [-]:       0.0\nheading   [rad]:     0.0\ncourse    [rad]:     0.0\nv_app     [m/s]:     0.0\nvel_kite  [m/s]:     Float32[0.0, 0.0, 0.0]\nX         [m]:       Float32[0.0, 1.6666666, 3.3333333, 5.0, 6.6666665, 8.333333, 10.0]\nY         [m]:       Float32[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\nZ         [m]:       Float32[0.0, 0.15380114, 0.6194867, 1.4100224, 2.5474184, 4.063342, 6.0000005]","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For simulation the time is since the start of the simulation, for flight logs the time is since launch.   You can access the fields of the state using the dot notation:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> rad2deg(st.elevation)\n30.963757f0","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The orientation is stored as unit quaternion (see: Quaterinos_and_spatial_rotation).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"If you need to work with rotations, use the package Rotatations.jl (see: Rotations.jl)   Example:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> using Rotations\n\njulia> q = QuatRotation(st.orient)\n3×3 QuatRotation{Float32} with indices SOneTo(3)×SOneTo(3)(Quaternion{Float32}(0.5, 0.5, -0.5, -0.5, true)):\n  0.0  0.0  -1.0\n -1.0  0.0   0.0\n  0.0  1.0   0.0","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The components X, Y and Z are vectors of the x, y and z positions of the tether particles. The last element of these vectors represents the kite position.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> kite_pos = [st.X[end], st.Y[end], st.Z[end]]\n3-element Vector{Float32}:\n 10.0\n  0.0\n  6.0000005","category":"page"},{"location":"examples/#The-system-log","page":"Examples","title":"The system log","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The system log can be used to store the result of a simulation or of a test flight.  It stores an array of SysState structs, to be precise: a StructArray .","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> log=demo_log(7)\njulia> syslog=log.syslog","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"You can acces this array by index:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"syslog[end]\ntime      [s]:       10.0\norient    [w,x,y,z]: Float32[0.5, 0.5, -0.5, -0.5]\nelevation [rad]:     0.64350116\nazimuth   [rad]:     0.0\nl_tether  [m]:       0.0\nv_reelout [m/s]:     0.0\nforce     [N]:       0.0\ndepower   [-]:       0.0\nsteering  [-]:       0.0\nheading   [rad]:     0.0\ncourse    [rad]:     0.0\nv_app     [m/s]:     0.0\nvel_kite  [m/s]:     Float32[0.0, 0.0, 0.0]\nX         [m]:       Float32[0.0, 1.6666666, 3.3333333, 5.0, 6.6666665, 8.333333, 10.0]\nY         [m]:       Float32[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\nZ         [m]:       Float32[0.0, 0.15380114, 0.6194867, 1.4100224, 2.5474184, 4.063342, 6.0000005]\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"But you can also access the syslog component wise:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> rad2deg.(syslog.elevation)\n201-element Vector{Float64}:\n  0.0\n  0.17188759349740207\n  0.343776734459538\n  0.5156689836913548\n  0.6875658486369466\n  0.8594689568023267\n  1.0313798022913758\n  ⋮\n 35.80299102537142\n 36.01521524816747\n 36.22800637666463\n 36.44138148633583\n 36.655340577181065\n 36.86990072467326","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note: To apply the function rad2deg on a vector the dot notation rad2deg. is used.","category":"page"},{"location":"examples/#The-type-SysLog","page":"Examples","title":"The type SysLog","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The type SysLog is a struct of a syslog as explained above and its name. In addition the properties x, y and z are defined, which represent the position of the kite over time.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> log = demo_log(7)\nSysLog{7}(\"Test_flight\", SysState{7}[time      [s]:            0.0\norient    [QuatRotation]: Float32[0.0 0.0 -1.0; -1.0 0.0 0.0; 0.0 1.0 0.0]\nx         [m]:            10.0\ny         [m]:            0.0\nz         [m]:            0.0\n...","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"You can acces the elements using the dot notation, for example an array of the values for the height:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> log.z\n201-element Vector{Float32}:\n 0.0\n 0.030000001\n 0.060000002\n 0.09\n 0.120000005\n 0.15\n 0.18\n ⋮\n 5.8500004\n 5.8800006\n 5.9100003\n 5.9400005\n 5.9700003\n 6.0000005","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This is useful for example for 2D plotting. Example:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Plots\nplot(log.syslog.time, log.z)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This command creates a 2D plot of the height vs. the time. After the command using Plots you will be asked if you want to install the Plots package. Just press ENTER and it will get installed.","category":"page"},{"location":"examples/#Saving-and-exporting-log-files","page":"Examples","title":"Saving and exporting log files","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Saving a log file:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> log = demo_log(7);\njulia> save_log(log)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The semicolon at the end of the first line suppresses the output.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Exporting a log file in csv format:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> log = demo_log(7);\njulia> export_log(log)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"By default the log file is save in the data folder. You can set a different folder as data folder with the function setdatapath. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> log = demo_log(7);\njulia> set_data_path(tempdir())\njulia> export_log(log)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Output on Linux:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"\"/tmp/Test_flight.csv\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The output on Windows will be different because the default temporary directory is different.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = KiteUtils","category":"page"},{"location":"#KiteUtils","page":"Home","title":"KiteUtils","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for KiteUtils.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is the foundation of Julia Kite Power Tools, which consist of the following packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Julia Kite Power Tools)","category":"page"},{"location":"#What-to-install","page":"Home","title":"What to install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you want to run simulations and see the results in 3D, please install the meta package  KiteSimulators . If you have already KiteSimulators installed, use using KiteSimulators instead of using KiteUtils. If you just want to learn how this package works quickly just install only this package.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Download Julia 1.6 or later, if you haven't already. You can add KiteUtils from  Julia's package manager, by typing ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add KiteUtils\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"at the Julia prompt.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you are using Windows, it is suggested to install git and bash, too. This is explained for example here: Julia on Windows .","category":"page"},{"location":"#Testing","page":"Home","title":"Testing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can run the unit tests of this package with the command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"test KiteUtils\"","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"read configuration files, written in .yaml format\nprovides the default configuration file settings.yaml\nlog the system state and read and write log files, memory efficient and fast due to the use of the Apache Arrow format\npresent log files in two different formats, one optimized to look at the system state at one point in time, and one that presents per-variable arrays with the time as index\nfunctions for coordinate system transformations\nprovides types for the state of a kite power system, for logfiles and for configuration parameters","category":"page"},{"location":"#Related","page":"Home","title":"Related","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The meta package KiteSimulators which contains all packages from Julia Kite Power Tools.\nthe packages KiteModels and KitePodModels and WinchModels and AtmosphericModels\nthe package KiteControllers and KiteViewers","category":"page"},{"location":"reference_frames/","page":"Reference frames","title":"Reference frames","text":"CurrentModule = KiteUtils","category":"page"},{"location":"reference_frames/#Reference-frames","page":"Reference frames","title":"Reference frames","text":"","category":"section"},{"location":"reference_frames/#Small-earth-reference-frame","page":"Reference frames","title":"Small earth reference frame","text":"","category":"section"},{"location":"reference_frames/","page":"Reference frames","title":"Reference frames","text":"To understand how the control system is working it is necessary to introduce the small earth reference frame. This name is chosen as an analogy to the geographic coordinate system, describing a position on planet earth: It makes clear to the reader that navigation methods, used on earth (like great circle navigation to find the shortest way between two points on the sphere) can also be used to navigate kites. The position of the kite and the ground station are measured in the \"Earth Centered Earth Fixed\" reference frame. The position of the kite relative to the ground station has to be converted into the \"Wind Reference Frame\" (x_w  y_w  z_w) as shown in Fig. 5.1. ","category":"page"},{"location":"reference_frames/","page":"Reference frames","title":"Reference frames","text":"The origin of the wind reference frame is placed at the anchor point of the tether and its x_w axis is always pointing in the direction of the averaged wind velocity. To obtain the coordinates of the kite in the small earth reference frame its position is projected on the unit sphere around the origin of the wind reference frame. Now, the position of the kite can be described with two angles, the azimuth angle φ and the elevation angle β . The movement of the kite in the direction of the tether is determined by the winch controller and can be ignored by the kite controller. The objective of the flight path controller as described in this thesis is to fly the kite on a prescribed trajectory that is adapted to the wind conditions.","category":"page"},{"location":"reference_frames/","page":"Reference frames","title":"Reference frames","text":"(Image: Small earth reference frame)","category":"page"},{"location":"reference_frames/","page":"Reference frames","title":"Reference frames","text":"In Fig. 5.1 the vectors x_k y_k and z_k define the body-fixed kite reference frame. In this chapter, the combination of the wing and the kite control unit (KCU) is seen as kite. The y_k axis is defined by the vector from the left to the right wing tip, the z_k axis is pointing downwards from the position of the kite parallel to the upper part of the tether, and the x_k axis is orthogonal to y_k and z_k . The heading angle ψ is the angle between the direction towards zenith and the vector x_k as projected on the tangential plane touching the position of the kite on the half sphere. If tether is not straight, z_k and z_SE are not aligned.","category":"page"},{"location":"reference_frames/","page":"Reference frames","title":"Reference frames","text":"Fechner U. A Methodology for the Design of Kite-Power Control Systems. 2016. 212 p. https://doi.org/10.4233/uuid:85efaf4c-9dce-4111-bc91-7171b9da4b77","category":"page"},{"location":"types/#Exported-Types","page":"Exported Types","title":"Exported Types","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"CurrentModule = KiteUtils","category":"page"},{"location":"types/#Config-files","page":"Exported Types","title":"Config files","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"Settings","category":"page"},{"location":"types/#KiteUtils.Settings","page":"Exported Types","title":"KiteUtils.Settings","text":"Settings\n\nFlat struct, defining the settings of the Simulator and the Viewer.\n\nsim_settings::String: name of the yaml file with the settings Default:\nlog_file::String: filename without extension  [replay only] Default:\nlog_level::Float64: how many messages to print on the console, 0=none Default: 2\ntime_lapse::Float64: relative replay speed Default: 0\nsim_time::Float64: simulation time             [sim only] Default: 0\nsegments::Int64: number of tether segments Default: 0\nsample_freq::Int64: sample frequency in Hz Default: 0\nzoom::Float64: zoom factor for the system view Default: 0\nkite_scale::Float64: relative zoom factor for the 4 point kite Default: 1.0\nfixed_font::String: name or filepath+filename of alternative fixed pitch font Default:\nl_tether::Float64: initial tether length       [m] Default: 0\nelevation::Float64: initial elevation angle                [deg] Default: 0\nv_reel_out::Float64: initial reel out speed    [m/s] Default: 0\ndepower::Float64: initial depower settings    [%] Default: 0\nabs_tol::Float64: absolute tolerance of the DAE solver [m, m/s] Default: 0.0\nrel_tol::Float64: relative tolerance of the DAE solver [-] Default: 0.0\nsolver::String: DAE solver, can be IDA or DFBDF Default: DFBDF\nlinear_solver::String: can be GMRES or Dense Default: GMRES\nmax_order::Int64: maximal order, usually between 3 and 5 Default: 4\nmax_iter::Int64: max number of iterations of the steady-state-solver Default: 1\nc0::Float64: steering offset   -0.0032           [-] Default: 0\nc_s::Float64: steering coefficient one point model Default: 0\nc2_cor::Float64: correction factor one point model Default: 0\nk_ds::Float64: influence of the depower angle on the steering sensitivity Default: 0\ndelta_st::Float64: steering increment (when pressing RIGHT) Default: 0\nmax_steering::Float64: max. steering angle of the side planes for four point model [degrees] Default: 0\nalpha_d_max::Float64: max depower angle              [deg] Default: 0\ndepower_offset::Float64: at rel_depower=0.236 the kite is fully powered [%] Default: 23.6\nmodel::String: file name of the 3D model of the kite for the viewer Default: data/kite.obj\nphysical_model::String: name of the kite model to use (KPS3 or KPS4) Default:\nversion::Int64: version of the model to use Default: 1\nmass::Float64: kite mass incl. sensor unit     [kg] Default: 0\narea::Float64: projected kite area            [m^2] Default: 0\nrel_side_area::Float64: relative side area               [%] Default: 0\nheight_k::Float64: height of the kite               [m] Default: 0\nalpha_cl::Vector{Float64}: Default: []\ncl_list::Vector{Float64}: Default: []\nalpha_cd::Vector{Float64}: Default: []\ncd_list::Vector{Float64}: Default: []\nwidth::Float64: width of the kite                [m] Default: 0\nalpha_zero::Float64: should be 5                      [degrees] Default: 0\nalpha_ztip::Float64: Default: 0\nm_k::Float64: relative nose distance; increasing m_k increases C2 of the turn-rate law Default: 0\nrel_nose_mass::Float64: Default: 0\nrel_top_mass::Float64: mass of the top particle relative to the sum of top and side particles Default: 0\nd_line::Float64: bridle line diameter                  [mm] Default: 0\nh_bridle::Float64: height of the bridle                    [m] Default: 0\nl_bridle::Float64: sum of the lengths of the bridle lines [m] Default: 0\nrel_compr_stiffness::Float64: relative compression stiffness of the kite springs Default: 0\nrel_damping::Float64: relative damping of the kite spring (relative to main tether) Default: 0\nkcu_mass::Float64: mass of the kite control unit   [kg] Default: 0\npower2steer_dist::Float64: power to steering line distance  [m] Default: 0\ndepower_drum_diameter::Float64: Default: 0\ntape_thickness::Float64: Default: 0\nv_depower::Float64: max velocity of depowering in units per second (full range: 1 unit) Default: 0\nv_steering::Float64: max velocity of steering in units per second   (full range: 2 units) Default: 0\ndepower_gain::Float64: 3.0 means: more than 33% error -> full speed Default: 3.0\nsteering_gain::Float64: Default: 3.0\nd_tether::Float64: tether diameter                 [mm] Default: 0\ncd_tether::Float64: drag coefficient of the tether Default: 0\ndamping::Float64: unit damping coefficient        [Ns] Default: 0\nc_spring::Float64: unit spring constant coefficient [N] Default: 0\nrho_tether::Float64: density of Dyneema                   [kg/m³] Default: 0\ne_tether::Float64: axial tensile modulus of the tether     [Pa] Default: 0\nmax_force::Float64: maximal (nominal) tether force; short overload allowed [N] Default: 4000\nv_ro_max::Float64: maximal reel-out speed                      [m/s] Default: 8\nv_ro_min::Float64: minimal reel-out speed (=max reel-in speed) [m/s] Default: -8\nv_wind::Float64: wind speed at reference height          [m/s] Default: 0\nv_wind_ref::Vector{Float64}: wind speed vector at reference height   [m/s] Default: []\ntemp_ref::Float64: temperature at reference height         [°C] Default: 0\nheight_gnd::Float64: height of groundstation above see level  [m] Default: 0\nh_ref::Float64:  reference height for the wind speed     [m] Default: 0\nrho_0::Float64: air density at zero height and 15 °C    [kg/m³] Default: 0\nalpha::Float64: exponent of the wind profile law Default: 0\nz0::Float64: surface roughness                       [m] Default: 0\nprofile_law::Int64: 1=EXP, 2=LOG, 3=EXPLOG, 4=FASTEXP, 5=FASTLOG, 6=FAST_EXPLOG Default: 0\nuse_turbulence::Float64: turbulence intensity relative to Cabau, NL Default: 0\nv_wind_gnds::Vector{Float64}: wind speeds at ref height for calculating the turbulent wind field [m/s] Default: []\navg_height::Float64: average height during reel out           [m] Default: 0\nrel_turbs::Vector{Float64}: relative turbulence at the vwindgnds Default: []\ni_ref::Float64: the expected value of the turbulence intensity at 15 m/s Default: 0\nv_ref::Float64: five times the average wind speed in m/s at hub height over the full year    [m/s] Default: 0\nheight_step::Float64: grid resolution in z direction                                                 [m] Default: 0\ngrid_step::Float64: grid resolution in x and y direction                                           [m] Default: 0\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"Also look at the default file that is parsed to fill the Settings struct with data: settings.yaml .","category":"page"},{"location":"types/#Log-files-and-internal-state-representation","page":"Exported Types","title":"Log files and internal state representation","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"MyFloat\nSysState{P}\nSysLog{P}\nLogger","category":"page"},{"location":"types/#KiteUtils.MyFloat","page":"Exported Types","title":"KiteUtils.MyFloat","text":"const MyFloat = Float32\n\nType used for position components and scalar SysState members.\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteUtils.SysState","page":"Exported Types","title":"KiteUtils.SysState","text":"SysState{P}\n\nBasic system state. One of these is saved per time step. P is the number of tether particles.\n\ntime::Float64: time since start of simulation in seconds\nt_sim::Float64: time needed for one simulation timestep\nsys_state::Int16: state of system state control\ne_mech::Float64: mechanical energy [Wh]\norient::StaticArraysCore.MVector{4, Float32}: orientation of the kite (quaternion, order w,x,y,z)\nelevation::Float32: elevation angle in radians\nazimuth::Float32: azimuth angle in radians\nl_tether::Float32: tether length [m]\nv_reelout::Float32: reel out velocity [m/s]\nforce::Float32: tether force [N]\ndepower::Float32: depower settings [0..1]\nsteering::Float32: steering settings [-1..1]\nheading::Float32: heading angle in radian\ncourse::Float32: course angle in radian\nv_app::Float32: norm of apparent wind speed [m/s]\nvel_kite::StaticArraysCore.MVector{3, Float32}: velocity vector of the kite\nX::StaticArraysCore.MVector{P, Float32} where P: vector of particle positions in x\nY::StaticArraysCore.MVector{P, Float32} where P: vector of particle positions in y\nZ::StaticArraysCore.MVector{P, Float32} where P: vector of particle positions in z\nvar_01::Float32\nvar_02::Float32\nvar_03::Float32\nvar_04::Float32\nvar_05::Float32\nvar_06::Float32\nvar_07::Float32\nvar_08::Float32\nvar_09::Float32\nvar_10::Float32\nvar_11::Float32\nvar_12::Float32\nvar_13::Float32\nvar_14::Float32\nvar_15::Float32\nvar_16::Float32\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteUtils.SysLog","page":"Exported Types","title":"KiteUtils.SysLog","text":"SysLog{P}\n\nFlight log, containing the basic data as struct of vectors which can be accessed as if it would be an array structs.  In addition an extended view on the data that includes derived/ calculated values for plotting. Finally it contains meta data like the name of the log file.\n\nname::String: name of the flight log\ncolmeta::Dict\nsyslog::StructArrays.StructArray{SysState{P}} where P: struct of vectors that can also be accessed like a vector of structs\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteUtils.Logger","page":"Exported Types","title":"KiteUtils.Logger","text":"mutable struct Logger{P, Q}\n\nStruct to store a simulation log. P is number of points of the tether, segments+1 and  Q is the number of time steps that will be pre-allocated.\n\nConstructor:\n\nLogger(P, steps)\n\nFields:\n\npoints::Int64: Default: P\nindex::Int64: Default: 1\ntime_vec::Vector{Float64}: Default: zeros(MyFloat, Q)\nt_sim_vec::Vector{Float64}: Default: zeros(MyFloat, Q)\nsys_state_vec::Vector{Int16}: Default: zeros(Int16, Q)\ne_mech_vec::Vector{Float64}: Default: zeros(MyFloat, Q)\norient_vec::Vector{StaticArraysCore.MVector{4, Float32}}: Default: zeros(SVector{4, Float32}, Q)\nelevation_vec::Vector{Float32}: Default: zeros(MyFloat, Q)\nazimuth_vec::Vector{Float32}: Default: zeros(MyFloat, Q)\nl_tether_vec::Vector{Float32}: Default: zeros(MyFloat, Q)\nv_reelout_vec::Vector{Float32}: Default: zeros(MyFloat, Q)\nforce_vec::Vector{Float32}: Default: zeros(MyFloat, Q)\ndepower_vec::Vector{Float32}: Default: zeros(MyFloat, Q)\nsteering_vec::Vector{Float32}: Default: zeros(MyFloat, Q)\nheading_vec::Vector{Float32}: Default: zeros(MyFloat, Q)\ncourse_vec::Vector{Float32}: Default: zeros(MyFloat, Q)\nv_app_vec::Vector{Float32}: Default: zeros(MyFloat, Q)\nvel_kite_vec::Vector{StaticArraysCore.MVector{3, Float32}}: Default: zeros(SVector{3, MyFloat}, Q)\nx_vec::Array{StaticArraysCore.MVector{P, Float32}, 1} where P: Default: zeros(SVector{P, MyFloat}, Q)\ny_vec::Array{StaticArraysCore.MVector{P, Float32}, 1} where P: Default: zeros(SVector{P, MyFloat}, Q)\nz_vec::Array{StaticArraysCore.MVector{P, Float32}, 1} where P: Default: zeros(SVector{P, MyFloat}, Q)\nvar_01_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_02_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_03_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_04_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_05_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_06_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_07_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_08_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_09_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_10_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_11_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_12_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_13_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_14_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_15_vec::Vector{Float64}: Default: zeros(Float64, Q)\nvar_16_vec::Vector{Float64}: Default: zeros(Float64, Q)\n\n\n\n\n\n","category":"type"}]
}
